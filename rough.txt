Seven Boom!
Create a function that takes an array of numbers and return "Boom!" if the digit 7 appears in the array. Otherwise, return "there is no 7 in the array".
sevenBoom([1, 2, 3, 4, 5, 6, 7]) ➞ "Boom!"
// 7 contains the number seven.
sevenBoom([8, 6, 33, 100]) ➞ "there is no 7 in the array"
// None of the items contain 7 within them.
sevenBoom([2, 55, 60, 97, 86]) ➞ "Boom!"
// 97 contains the number seven.

Reverse the Odd Length Words
Given a string, reverse all the words which have odd length. The even length words are not changed.
reverseOdd("Bananas") ➞ "sananaB"
reverseOdd("One two three four") ➞ "enO owt eerht four"
reverseOdd("Make sure uoy only esrever sdrow of ddo length")
➞ "Make sure you only reverse words of odd length"

White Spaces Between Lower and Uppercase Letters
Write a function that inserts a white space between every instance of a lower character followed immediately by an upper character.
insertWhitespace("SheWalksToTheBeach") ➞ "She Walks To The Beach"
insertWhitespace("MarvinTalksTooMuch") ➞ "Marvin Talks Too Much"
insertWhitespace("TheGreatestUpsetInHistory") ➞ "The Greatest Upset In History"

Changing a String into camelCase
Using Camel Case (or camelCase) is where the first word is in lower case, and all words after it have their first letter capitalised. Note that there are no spaces in between words!
Create a function that takes a string and returns it back in camelCase.
camelCasing("Hello World") ➞ "helloWorld"
camelCasing("snake_case") ➞ "snakeCase"
camelCasing("low high_HIGH") ➞ "lowHighHigh"
Notes
You need to remove all spaces and underscores.
There will be no numbers in inputs.

Convert "Zero" and "One" to "1" and "0"
Create a function that takes a string as an argument. The function must return a string containing 1s and 0s based on the string argument's words. If any word in the argument is not equal to "zero" or "one" (case insensitive), you should ignore it. The returned string's length should be a multiple of 8, if the string is not a multiple of 8 you should remove the numbers in excess.
textToNumberBinary("zero one zero one zero one zero one") ➞ "01010101"
textToNumberBinary("Zero one zero ONE zero one zero one") ➞ "01010101"
textToNumberBinary("zero one zero one zero one zero one one two") ➞ "01010101"
textToNumberBinary("zero one zero one zero one zero three") ➞ ""
textToNumberBinary("one one") ➞ ""
You must return the result as a string.

Divide Array into Chunks
Write a function that divides an array into chunks of size n, where n is the length of each chunk.
chunkify([2, 3, 4, 5], 2) ➞ [[2, 3], [4, 5]]
chunkify([2, 3, 4, 5, 6], 2) ➞ [[2, 3], [4, 5], [6]]
chunkify([2, 3, 4, 5, 6, 7], 3) ➞ [[2, 3, 4], [5, 6, 7]]
chunkify([2, 3, 4, 5, 6, 7], 1) ➞ [[2], [3], [4], [5], [6], [7]]
chunkify([2, 3, 4, 5, 6, 7], 7) ➞ [[2, 3, 4, 5, 6, 7]]
Notes
It's O.K. if the last chunk is not completely filled (see example #2).
Integers will always be single-digit.

Building a Staircase
Create a function that builds a staircase given the height and the type of building block.
buildStaircase(3, "#") ➞ [
  ["#", "_", "_"],
  ["#", "#", "_"],
  ["#", "#", "#"]
]

buildStaircase(4, "#") ➞ [
  ["#", "_", "_", "_"],
  ["#", "#", "_", "_"],
  ["#", "#", "#", "_"],
  ["#", "#", "#", "#"]
]

buildStaircase(3, "A") ➞ [
  ["A", "_", "_"],
  ["A", "A", "_"],
  ["A", "A", "A"]
]

// height = 3 and building block = "A"

buildStaircase(4, "$") ➞ [
  ["$", "_", "_", "_"],
  ["$", "$", "_", "_"],
  ["$", "$", "$", "_"],
  ["$", "$", "$", "$"]
]
Notes
If the height is 0, return an empty array [].
See Comments or Resources for help.

-------------

<body class="container-fluid d-flex">
  <section class="mt-3 w-25">
    <form class="ms-4">
      <div class="mb-3 d-none">
        <label for="id" class="form-label">Id:</label>
        <input type="number" class="form-control" id="id" aria-describedby="id"></textarea>
      </div>
      <div class="mb-3">
        <label for="description" class="form-label">Description:</label>
        <textarea class="form-control" id="description" aria-describedby="description"></textarea>
      </div>
      <div class="mb-3">
        <label for="amount" class="form-label">Amount:</label>
        <input type="number" class="form-control" id="amount" aria-describedby="amount">
      </div>
      <div class="mb-3">
        <label for="date" class="form-label">Date:</label>
        <input type="date" class="form-control" id="date" aria-describedby="date">
      </div>
      <div class="mb-3">
        <select class="form-select" aria-label="Default select example" id="category">
          <option value="" selected>Select Category</option>
          <option value="1">One</option>
          <option value="2">Two</option>
          <option value="3">Three</option>
          <option value="4">Four</option>
          <option value="5">Five</option>
          <option value="6">Six</option>
          <option value="7">Seven</option>
          <option value="8">Eight</option>
          <option value="9">Nine</option>
        </select>
      </div>

      <button type="submit" class="btn btn-primary" id="add">Add</button>
      <button type="submit" class="btn btn-danger d-none" id="update">Update</button>
    </form>
  </section>

  <section class="ps-5 ms-5 mt-3 w-100">
    <table class="table table-responsive" id="myTable">
      <thead>
        <tr>
          <th scope="col">Id</th>
          <th scope="col">Description</th>
          <th scope="col">Amount</th>
          <th scope="col">Date</th>
          <th scope="col">Category</th>
          <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody id="tbody">

      </tbody>
    </table>
  </section>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="/main.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>

------

function updateData() {
  console.log("in")
  let description = $("#description").val();
  let amount = $("#amount").val();
  let date = $("#date").val();
  let category = $("#category").val();
  let id = $("#id").val();

  let index = expenses.findIndex(expense => expense.id === id);

  if (index !== -1) {
    expenses[index] = {
      id: id,
      description: description,
      amount: parseFloat(amount),
      date: date,
      categoryId: parseInt(category)
    };
  }

  console.log(expenses);
  loaddata();
}

------------------------------------------------------------------------------------------

let vacancydetails: Vacancydetails[] = JSON.parse(localStorage.getItem("vacancyTableData") || "[]");
let applicantdetails: Applicantdetails[] = JSON.parse(localStorage.getItem("applicantTableData") || "[]");

setVacancyTableData();
setApplicantTableData();