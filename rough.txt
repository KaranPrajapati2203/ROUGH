import { Component, ViewChild, ViewContainerRef, ComponentRef } from '@angular/core';
import { ChildComponent } from './components/child/child.component';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [ChildComponent],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  @ViewChild('childContainer', { read: ViewContainerRef, static: true })
  container!: ViewContainerRef;

  private childRefs: ComponentRef<ChildComponent>[] = []; // Track references to child components
  private selectedChildIndex: number | null = null;

  addChild(): void {
    const componentRef = this.container.createComponent(ChildComponent);
    this.childRefs.push(componentRef); // Keep track of the child instance

    // Automatically select the newly added child
    this.selectedChildIndex = this.childRefs.length - 1;
  }

  highlightChild(): void {
    if (this.selectedChildIndex !== null) {
      const selectedChild = this.childRefs[this.selectedChildIndex].instance;
      selectedChild.highlight();
    }
  }

  clearHighlight(): void {
    if (this.selectedChildIndex !== null) {
      const selectedChild = this.childRefs[this.selectedChildIndex].instance;
      selectedChild.clearHighlight();
    }
  }
}

------------

<div>
    <button (click)="addChild()">Add Child</button>
    <button (click)="highlightChild()">Highlight Selected</button>
    <button (click)="clearHighlight()">Clear Highlight</button>
</div>
<div>
    <ng-template #childContainer></ng-template>
</div>

------------

button {
    margin-right: 10px;
}

--------------------------------------------------------------------------------------------------------------------------------------------------

import { Component, ElementRef } from '@angular/core';

@Component({
  selector: 'app-child',
  standalone: true,
  imports: [],
  templateUrl: './child.component.html',
  styleUrl: './child.component.css'
})
export class ChildComponent {
  constructor(private el: ElementRef) { }

  highlight(): void {
    this.el.nativeElement.querySelector('.child-container').classList.add('highlight');
  }

  clearHighlight(): void {
    this.el.nativeElement.querySelector('.child-container').classList.remove('highlight');
  }
}


-------------------

<div class="child-container">
    <p>Child Component</p>
</div>

------------------

.child-container {
    padding: 10px;
    border: 1px solid #ccc;
    margin: 5px;
}

.highlight {
    background-color: yellow;
}

------------------------------------------------------------------------------------------------------------

I'm glad it's working! Let's walk through the entire code and understand it step by step.

---

### **Overview**
The goal is to:
1. Dynamically create child components.
2. Use `@ViewChild` to interact with specific child components (like calling their methods).

The code demonstrates:
- Adding child components dynamically.
- Highlighting a selected child component.
- Clearing the highlight on a selected child component.

---

### **Parent Component (AppComponent)**

#### **app.component.ts**
This is the main parent component that dynamically creates and interacts with child components.

**Key Sections**:

1. **Dependencies and Imports**:
   ```typescript
   import { Component, ViewChild, ViewContainerRef, ComponentRef } from '@angular/core';
   import { ChildComponent } from './child/child.component';
   ```
   - `ViewChild`: Used to get a reference to the `ViewContainerRef` where child components will be dynamically added.
   - `ViewContainerRef`: Represents the placeholder (`ng-template`) where child components will be created dynamically.
   - `ComponentRef`: Represents a reference to the dynamically created child component, allowing interaction with its instance.

---

2. **Component Metadata**:
   ```typescript
   @Component({
     selector: 'app-root',
     templateUrl: './app.component.html',
     styleUrls: ['./app.component.css']
   })
   ```
   - The `selector` is `app-root`, which represents this component.
   - The `templateUrl` and `styleUrls` point to the respective HTML and CSS files.

---

3. **Dynamic Component Management**:
   - `@ViewChild`:
     ```typescript
     @ViewChild('childContainer', { read: ViewContainerRef, static: true })
     container!: ViewContainerRef;
     ```
     - `childContainer`: Refers to the `ng-template` in the parent HTML, where child components will be dynamically added.
     - `ViewContainerRef`: Provides methods to dynamically add or remove components.

   - `childRefs`:
     ```typescript
     private childRefs: ComponentRef<ChildComponent>[] = [];
     ```
     - An array to store references (`ComponentRef`) to the dynamically created child components. This allows interaction with the specific child components later.

   - `selectedChildIndex`:
     ```typescript
     private selectedChildIndex: number | null = null;
     ```
     - Tracks the currently selected child component (by its index in the `childRefs` array).

---

4. **Methods**:
   - **Add Child**:
     ```typescript
     addChild(): void {
       const componentRef = this.container.createComponent(ChildComponent);
       this.childRefs.push(componentRef); // Keep track of the child instance
       this.selectedChildIndex = this.childRefs.length - 1; // Automatically select the last added child
     }
     ```
     - Dynamically creates a new `ChildComponent` instance using `ViewContainerRef.createComponent()`.
     - The created `ComponentRef` is added to the `childRefs` array for tracking.
     - Updates `selectedChildIndex` to select the last added child.

   - **Highlight Child**:
     ```typescript
     highlightChild(): void {
       if (this.selectedChildIndex !== null) {
         const selectedChild = this.childRefs[this.selectedChildIndex].instance;
         selectedChild.highlight();
       }
     }
     ```
     - Accesses the selected child component from `childRefs` using `selectedChildIndex`.
     - Calls the `highlight()` method of the selected child instance.

   - **Clear Highlight**:
     ```typescript
     clearHighlight(): void {
       if (this.selectedChildIndex !== null) {
         const selectedChild = this.childRefs[this.selectedChildIndex].instance;
         selectedChild.clearHighlight();
       }
     }
     ```
     - Similar to `highlightChild()`, but calls the `clearHighlight()` method to remove the highlight.

---

#### **app.component.html**
This is the HTML template for the parent component.

```html
<div>
  <button (click)="addChild()">Add Child</button>
  <button (click)="highlightChild()">Highlight Selected</button>
  <button (click)="clearHighlight()">Clear Highlight</button>
</div>
<div>
  <ng-template #childContainer></ng-template>
</div>
```

**Key Points**:
1. **Buttons**:
   - Bind to the `addChild()`, `highlightChild()`, and `clearHighlight()` methods to perform respective actions.
2. **`ng-template`**:
   - Acts as a placeholder (`ViewContainerRef`) where the dynamic child components are inserted.

---

#### **app.component.css**
Basic styling for the buttons.

```css
button {
  margin-right: 10px;
}
```

---

### **Child Component (ChildComponent)**

#### **child.component.ts**
This is the child component that is created dynamically.

**Key Sections**:

1. **Dependencies**:
   ```typescript
   import { Component, ElementRef } from '@angular/core';
   ```
   - `ElementRef`: Used to access and manipulate the DOM element associated with the component.

---

2. **Highlight and Clear Highlight**:
   ```typescript
   highlight(): void {
     this.el.nativeElement.querySelector('.child-container').classList.add('highlight');
   }

   clearHighlight(): void {
     this.el.nativeElement.querySelector('.child-container').classList.remove('highlight');
   }
   ```
   - `highlight()`: Adds the `highlight` CSS class to the `.child-container` element, changing its appearance.
   - `clearHighlight()`: Removes the `highlight` CSS class, reverting the appearance.

---

#### **child.component.html**
The HTML template for the child component.

```html
<div class="child-container">
  <p>Child Component</p>
</div>
```

---

#### **child.component.css**
CSS for the child component.

```css
.child-container {
  padding: 10px;
  border: 1px solid #ccc;
  margin: 5px;
}

.highlight {
  background-color: yellow;
}
```

- `.child-container`: Styles the container with padding, border, and margin.
- `.highlight`: Adds a yellow background when the child is highlighted.

---

### **How It All Works**

1. **Adding Child Components**:
   - Clicking **"Add Child"** dynamically creates a new `ChildComponent` and inserts it into the `ng-template`.
   - The new component's reference is stored in the `childRefs` array.

2. **Highlighting a Child**:
   - Clicking **"Highlight Selected"** calls the `highlight()` method of the currently selected child component (last added by default).
   - This adds the `highlight` CSS class to the child component's DOM element, changing its background color.

3. **Clearing the Highlight**:
   - Clicking **"Clear Highlight"** calls the `clearHighlight()` method of the selected child, removing the highlight.

---

### **Output Example**
1. Initially, no child components are present.
2. Clicking **"Add Child"** creates child components dynamically.
3. Clicking **"Highlight Selected"** highlights the last added child.
4. Clicking **"Clear Highlight"** removes the highlight.

Let me know if you have further questions or need more clarification!