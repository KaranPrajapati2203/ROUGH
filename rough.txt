Here are 20 potential Docker questions for your practical exam, based on the patterns observed in your professor's practice tasks:

---

### **Static HTML Deployment**
1. Deploy a static HTML file using the `nginx` image on Docker port 8080, ensuring the HTML file is served correctly without a Dockerfile.
2. Write a Dockerfile to deploy a static HTML page using the `httpd` image on port 3000.

---

### **Multi-Stage Builds**
3. Create a multi-stage Dockerfile to build a React project using `node` in stage 1 and serve it with `nginx` in stage 2.
4. Use a multi-stage build to optimize the image size of a simple Node.js application with static files.

---

### **Docker Compose**
5. Create a `docker-compose.yml` to deploy a Node.js application with live changes using a volume on port 4000.
6. Configure Docker Compose to deploy a frontend and backend service, ensuring proper communication between the containers.

---

### **Vite.js and JavaScript Projects**
7. Write a Dockerfile to deploy a Vite.js project on port 3000, running `npm install` and `npm run build` manually in the build steps.
8. Deploy a React or Vite.js project using Docker Compose with a volume for live changes.

---

### **Nginx and Web Servers**
9. Deploy a static website using `nginx` and a Docker volume, binding the current directory to `/usr/share/nginx/html` for live updates.
10. Set up a reverse proxy using `nginx` for two separate Docker containers running on ports 5001 and 5002.

---

### **Docker Hub**
11. Push an image of your deployed project to Docker Hub, tagging it as `latest`.
12. Pull an image from Docker Hub and run it with specific environment variables.

---

### **Ports and Flags**
13. Run a container with a static HTML file on port 8081, ensuring it restarts automatically if it stops.
14. Create and run a container using `docker run` with custom environment variables and bind mounts.

---

### **Dockerfile Configurations**
15. Write a Dockerfile for a Python Flask application, exposing port 5000, and run the container.
16. Create a Dockerfile to build a Node.js application with dependencies installed in one layer and source files copied in another.

---

### **Advanced Volume Usage**
17. Use Docker Compose to create a bind volume that synchronizes with a specific subdirectory of the host machine.

---

### **Log and Debugging**
18. Deploy a container, inspect its logs using `docker logs`, and diagnose any issues with missing files.

---

### **Networking**
19. Set up a Docker network and connect two containers to communicate over that network.

---

### **Image Optimization**
20. Optimize a Dockerfile for a multi-stage Node.js build by reducing the final image size.

---

These questions focus on diverse aspects of Docker, ensuring that you're prepared for anything from basic deployment to advanced configurations and optimizations. Let me know if you want detailed answers or additional practice!

--------------------------------------------------------------------------------------------------------------------------

Here are the detailed solutions for each Docker task:

---

### **Practice 1: Deploy Static HTML on Docker with Nginx (Port 8000)**

1. **Create a static HTML page**:
   - Create an `index.html` file with the required content.

     ```html
     <!DOCTYPE html>
     <html lang="en">
     <head>
         <meta charset="UTF-8">
         <meta name="viewport" content="width=device-width, initial-scale=1.0">
         <title>Docker Information</title>
     </head>
     <body>
         <h1>Docker Information</h1>
         <ul>
             <li><b>What is Docker?</b> A platform for containerized applications.</li>
             <li><b>What is a Container?</b> A lightweight, portable software unit.</li>
             <li><b>What are Images?</b> A blueprint for containers.</li>
             <li><b>What is Nginx?</b> A web server and reverse proxy.</li>
             <li><b>10 Docker Commands:</b></li>
             <ul>
                 <li>`docker run`: Run a container.</li>
                 <li>`docker build`: Build an image from a Dockerfile.</li>
                 <li>`docker pull`: Pull an image from Docker Hub.</li>
                 <li>`docker push`: Push an image to Docker Hub.</li>
                 <li>`docker ps`: List running containers.</li>
                 <li>`docker stop`: Stop a running container.</li>
                 <li>`docker start`: Start a stopped container.</li>
                 <li>`docker rm`: Remove a container.</li>
                 <li>`docker rmi`: Remove an image.</li>
                 <li>`docker exec`: Execute a command inside a running container.</li>
             </ul>
         </ul>
     </body>
     </html>
     ```

2. **Create a Dockerfile**:
   - Place this file in the same directory as `index.html`.

     ```dockerfile
     # Use the Nginx base image
     FROM nginx:latest

     # Copy the static HTML file to the default Nginx directory
     COPY index.html /usr/share/nginx/html/

     # Expose port 8000
     EXPOSE 8000
     ```

3. **Build Docker Image**:
   ```bash
   docker build -t static-html-nginx .
   ```

4. **Run Docker Container**:
   ```bash
   docker run -d -p 8000:80 static-html-nginx
   ```

5. **Access the site**:
   - Open your browser and navigate to `http://localhost:8000`.

---

### **Practice 2: Deploy Static HTML Using `docker run` (Port 8080)**

1. **Pull the Nginx image**:
   ```bash
   docker pull nginx:latest
   ```

2. **Create a static HTML file**:
   - Save it as `index.html` with the desired content.

3. **Run the container with volume**:
   ```bash
   docker run -d -p 8080:80 -v $(pwd)/index.html:/usr/share/nginx/html/index.html nginx:latest
   ```

4. **Access the site**:
   - Open `http://localhost:8080`.

---

### **Practice 3: Deploy Vite Vanilla Project**

1. **Create a Vite project**:
   ```bash
   npm create vite@latest vite-app --template vanilla
   cd vite-app
   ```

2. **Create a Dockerfile**:
   ```dockerfile
   # Stage 1: Build
   FROM node:18 AS builder
   WORKDIR /app
   COPY . .
   RUN npm install && npm run build

   # Stage 2: Serve
   FROM nginx:latest
   COPY --from=builder /app/dist /usr/share/nginx/html
   EXPOSE 80
   ```

3. **Build and run**:
   ```bash
   docker build -t vite-app .
   docker run -d -p 3000:80 vite-app
   ```

---

### **Assignment 1: Deploy Vite Vanilla Project (Port 80)**

1. **Reuse the Dockerfile from Practice 3**.
2. **Build and run on port 80**:
   ```bash
   docker build -t css-assignment .
   docker run -d -p 80:80 css-assignment
   ```

---

### **Practice 1: Multi-Stage Build (Port 5000)**

1. **Create a Dockerfile**:
   ```dockerfile
   # Stage 1: Build
   FROM node:18 AS builder
   WORKDIR /app
   COPY . .
   RUN npm install && npm run build

   # Stage 2: Deploy
   FROM nginx:latest
   COPY --from=builder /app/dist /usr/share/nginx/html
   EXPOSE 5000
   ```

2. **Build and run**:
   ```bash
   docker build -t multi-stage-html .
   docker run -d -p 5000:80 multi-stage-html
   ```

---

### **Practice 2: Docker Compose (Live Changes on Port 5001)**

1. **Create `docker-compose.yml`**:
   ```yaml
   version: '3.8'
   services:
     app:
       build:
         context: .
         dockerfile: Dockerfile
       ports:
         - "5001:3000"
       volumes:
         - .:/app
       command: npm run dev
   ```

2. **Dockerfile**:
   ```dockerfile
   FROM node:18
   WORKDIR /app
   COPY package*.json ./
   RUN npm install
   COPY . .
   ```

3. **Run Compose**:
   ```bash
   docker-compose up
   ```

---

### **Practice 3: Push Docker Image to Docker Hub**

1. **Create a registry on Docker Hub**.
2. **Login to Docker Hub**:
   ```bash
   docker login
   ```

3. **Tag the image**:
   ```bash
   docker tag multi-stage-html <your-dockerhub-username>/multi-stage-html:latest
   ```

4. **Push the image**:
   ```bash
   docker push <your-dockerhub-username>/multi-stage-html:latest
   ```

---

### **Assignment 1: Deploy on Port 5002**

1. **Docker Compose**:
   ```yaml
   version: '3.8'
   services:
     app:
       image: node:latest
       working_dir: /app
       volumes:
         - .:/app
       ports:
         - "5002:3000"
       command: npm install && npm run dev
   ```

2. **Push to Docker Hub**:
   ```bash
   docker build -t htmlrepo .
   docker tag htmlrepo <your-dockerhub-username>/htmlrepo:latest
   docker push <your-dockerhub-username>/htmlrepo:latest
   ```