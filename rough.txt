using System.ComponentModel;
using System.Net;
using System.Text.Json;

namespace Day4_Assignment2
{
    internal class Book
    {
        public static List<Book> BookList = new List<Book>();
        public static Dictionary<string, Queue<string>> WaitingQueue = new Dictionary<string, Queue<string>>();

        public string BookID { get; set; }
        public string Title { get; set; }
        public string Author { get; set; }
        public bool Availability { get; set; }

        public void ViewWaitingQueue()
        {
            Console.WriteLine("Books with Waiting Queues:");
            foreach (var queue in WaitingQueue)
            {
                Console.WriteLine(JsonSerializer.Serialize(queue));
            }
        }
        public void SortBook()
        {
            var result = BookList.OrderBy(x => x.Title).ToList();
            Console.WriteLine("Sorted Books are:");
            foreach (var item in result)
            {
                Console.WriteLine(JsonSerializer.Serialize(item));
            }
        }
        public void SearchBook()
        {
            Console.Write("Enter name of book to search: ");
            string name = Console.ReadLine().Trim().ToLower();
            if (string.IsNullOrEmpty(name))
            {
                Console.WriteLine("name cannot be empty");
                SearchBook();
            }
            else
            {
                bool isFound = false;
                foreach (Book book in BookList)
                {
                    if (book.Title.ToLower().Contains(name))
                    {
                        isFound = true;
                        Console.WriteLine(JsonSerializer.Serialize(book));
                    }
                }

                if (!isFound)
                {
                    Console.WriteLine($"Book having name {name} does not exists!!");
                }
            }
        }

        public void ReturnBook()
        {
            Console.Write("Enter your name: ");
            string name = Console.ReadLine();
            Console.Write("Enter BookID you want to return: ");
            string bookID = Console.ReadLine();

            if (string.IsNullOrEmpty(bookID.Trim()) || string.IsNullOrEmpty(name.Trim()))
            {
                Console.WriteLine("All the fields are required, try again");
                ReturnBook();
                return;
            }

            bool isFound = false;

            // Check if the borrowing record exists
            foreach (var record in BorrowingRecord.BorrowingRecordStack)
            {
                if (record.BookID == bookID.Trim() && record.BorrowedBy.ToLower() == name.Trim().ToLower())
                {
                    isFound = true;
                    record.HasReturnedBook = true;

                    Console.WriteLine($"'{name}' has returned the book with ID '{bookID}'.");

                    // Update book availability and handle waiting queue
                    foreach (var book in BookList)
                    {
                        if (book.BookID == bookID.Trim())
                        {
                            book.Availability = true;

                            // Decrement borrow count for the user
                            User returningUser = null;
                            foreach (var user in User.users)
                            {
                                if (user.Name.ToLower() == name.Trim().ToLower())
                                {
                                    returningUser = user;
                                    break;
                                }
                            }

                            if (returningUser != null)
                            {
                                returningUser.BorrowCount--;
                                if (returningUser.BorrowCount == 0)
                                {
                                    User.users.Remove(returningUser); 
                                }
                            }

                            // Check if there is a waiting queue for the book
                            if (WaitingQueue.ContainsKey(bookID) && WaitingQueue[bookID].Count > 0)
                            {
                                // Assign the book to the next user in the queue
                                string nextUserId = WaitingQueue[bookID].Dequeue();
                                Console.WriteLine($"Book '{bookID}' is now assigned to User ID: {nextUserId}");

                                BorrowingRecord newRecord = new BorrowingRecord
                                {
                                    BookID = book.BookID,
                                    BookTitle = book.Title,
                                    BorrowedBy = nextUserId
                                };
                                newRecord.AddNewBorrowingRecord(newRecord);

                                // Update the book's availability to false
                                book.Availability = false;

                                // Add or update the next user in the users list
                                bool userFound = false;
                                foreach (var user in User.users)
                                {
                                    if (user.UserID == nextUserId)
                                    {
                                        user.BorrowCount++;
                                        userFound = true;
                                        break;
                                    }
                                }

                                if (!userFound)
                                {
                                    User newUser = new User { UserID = nextUserId, Name = nextUserId, BorrowCount = 1 };
                                    User.users.Add(newUser);
                                }
                            }
                            else
                            {
                                Console.WriteLine($"No one is waiting for book ID '{bookID}'. The book is now available.");
                            }
                        }
                    }
                    break;
                }
            }

            if (!isFound)
            {
                Console.WriteLine("Either the name or bookID does not exist.");
            }
        }


        public void BorrowBook(string bookid)
        {
            bool isFound = false;
            foreach (Book book in BookList)
            {
                if (book.BookID == bookid)
                {
                    Console.Write("Enter User ID: ");
                    string userId = Console.ReadLine().Trim();
                    Console.Write("Enter Your Name: ");
                    string userName = Console.ReadLine().Trim();

                    if (!string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(userName))
                    {
                        isFound = true;
                        if (book.Availability)
                        {
                            book.Availability = false;
                            User user = new User { UserID = userId, Name = userName, BorrowCount = 1 };
                            User.users.Add(user);

                            BorrowingRecord record = new BorrowingRecord
                            {
                                BookID = book.BookID,
                                BookTitle = book.Title,
                                BorrowedBy = userName
                            };
                            record.AddNewBorrowingRecord(record);

                            Console.WriteLine($"Book '{book.Title}' borrowed by '{userName}'.");
                        }
                        else
                        {
                            //adding to queue
                            if (!WaitingQueue.ContainsKey(bookid))
                            {
                                WaitingQueue[bookid] = new Queue<string>();
                            }
                            WaitingQueue[bookid].Enqueue(userId);
                            Console.WriteLine($"Book '{bookid}' is unavailable. You have been added to the waiting queue.");

                        }
                    }
                    else
                    {
                        Console.WriteLine("Fields cannot be empty, try again");
                    }
                    break;
                }
            }
            if (!isFound)
            {
                Console.WriteLine($"No book exists having ID {bookid}");
            }
        }

        public void ViewBorrowingRecords()
        {
            if (BorrowingRecord.BorrowingRecordStack.Count > 0)
            {
                foreach (var book in BorrowingRecord.BorrowingRecordStack)
                {
                    Console.WriteLine(JsonSerializer.Serialize(book));
                }
            }
            else
            {
                Console.WriteLine("No borrowing records available");
            }
        }

        public void AddBook()
        {
            try
            {
                Console.Write("Enter Book ID: ");
                BookID = Console.ReadLine();
                Console.Write("Enter Book Title: ");
                Title = Console.ReadLine();
                Console.Write("Enter Book Author: ");
                Author = Console.ReadLine();
                Console.Write("Enter Book Availability(true/false): ");
                Availability = Convert.ToBoolean(Console.ReadLine());
                if (BookID == "" || Title == "" || Author == "")
                {
                    Console.WriteLine("All the fields are required, try again");
                    AddBook();
                }
                else
                {
                    Book book = new Book { BookID = BookID, Title = Title, Author = Author, Availability = Availability };
                    BookList.Add(book);
                }

                Console.WriteLine("List of books are: ");
                foreach (Book book in BookList)
                {
                    Console.WriteLine(JsonSerializer.Serialize(book));
                }
            }
            catch
            {
                Console.WriteLine("Enter again with valid values");
                AddBook();
            }
        }

        public void FindBookByAuthor(string author)
        {
            List<Book> authorBookList = new List<Book>();
            if (author.Trim() == "")
            {
                Console.WriteLine("Author name cannot be empty, try again");
            }
            else
            {
                bool isFound = false;
                foreach (Book book in BookList)
                {
                    if (book.Author.ToLower() == author.ToLower())
                    {
                        isFound = true;
                        authorBookList.Add(book);
                    }
                }

                if (!isFound)
                {
                    Console.WriteLine($"No books of '{author}' exists");
                }
                else
                {
                    Console.WriteLine($"The books having author '{author}' are:");
                    foreach (Book book in authorBookList)
                    {
                        Console.WriteLine(JsonSerializer.Serialize(book));
                    }
                }
            }
        }

        public void RemoveBookByID(string id)
        {
            bool isFound = false;
            foreach (Book book in BookList)
            {
                if (book.BookID == id)
                {
                    isFound = true;
                    BookList.Remove(book);
                    break;
                }
            }
            if (!isFound)
            {
                Console.WriteLine($"Book having ID {id} doesn't exist!!");
            }
        }
    }
}
