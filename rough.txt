import { Component } from '@angular/core';
import { StockService } from './services/stock.service';
import { CommonModule } from '@angular/common';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  stockData: any[] = [];

  constructor(private stockService: StockService) { }

  ngOnInit(): void {
    // Initial data load
    this.stockService.getStockUpdates().subscribe(data => {
      this.stockData = data;
    });
  }

  subscribe(): void {
    this.stockService.subscribeToUpdates();
  }

  unsubscribe(): void {
    this.stockService.unsubscribeFromUpdates();
  }

  ngOnDestroy(): void {
    this.stockService.unsubscribeFromUpdates();
  }
}

-------------------------------------------------------------------------------------

<div>
    <button (click)="subscribe()" id="subscribeButton">Subscribe</button>
    <button (click)="unsubscribe()" id="unsubscribeButton">Unsubscribe</button>
</div>
<div>
    <h3>Stock Prices:</h3>
    <div *ngFor="let stock of stockData" id="stockPriceDisplay">
        {{ stock.name }}: {{ stock.price }}
    </div>
</div>

-------------------------------------------------------------------------------------

import { Injectable } from '@angular/core';
import { BehaviorSubject, fromEvent, interval, map, Observable, Subscription } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class StockService {
  private stockData: any[] = [
    { name: 'ITC', price: 2500 },
    { name: 'MRF', price: 75000 },
    { name: 'NTPC', price: 250 }
  ];

  // BehaviorSubject to hold current stock data
  private stockSubject = new BehaviorSubject<any[]>(this.stockData);
  private priceUpdateSubscription: Subscription | null = null;

  constructor() { }

  // Random price generator
  private randomPrice(): number {
    return parseFloat(((Math.random() * 6000) + 17).toFixed(2));
  }

  // Observable to emit stock updates
  getStockUpdates(): Observable<any[]> {
    return this.stockSubject.asObservable();
  }

  // Start emitting price updates
  subscribeToUpdates(): void {
    if (!this.priceUpdateSubscription) {
      this.priceUpdateSubscription = interval(1000).subscribe(() => {
        this.stockData.forEach(stock => {
          stock.price = this.randomPrice();
        });
        this.stockSubject.next([...this.stockData]); // Emit updated stock data
      });
    }
  }

  // Stop emitting price updates
  unsubscribeFromUpdates(): void {
    if (this.priceUpdateSubscription) {
      this.priceUpdateSubscription.unsubscribe();
      this.priceUpdateSubscription = null;
    }
  }
}

-------------------------------------------------------------------------------------------------------

