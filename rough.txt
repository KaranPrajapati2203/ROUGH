// Interface to represent a product
interface Product {
  id: string | number;
  name: string;
  quantity: number;
}

// Optional interface to represent restock requests
interface RestockRequest {
  id: string | number;
  quantity: number;
}

class Inventory {
  private products: Product[] = [];

  // Add new products to the inventory
  addProduct(products: Product[]): void {
    this.products.push(...products);
  }

  // Display all available products
  showProducts(): void {
    console.log("Available Products:", this.products);
  }

  // Purchase products and update the inventory
  buyProduct(productList: Product[]): void {
    for (const data of productList) {
      const product = this.products.find(p => p.id === data.id);

      if (!product) {
        console.error(`Product with ID ${data.id} not found.`);
        continue;
      }

      if (data.quantity > product.quantity) {
        console.warn(`Insufficient quantity. "${product.name}" has only ${product.quantity} units.`);
        continue;
      }

      product.quantity -= data.quantity;
      console.log(`You bought ${data.quantity} units of "${product.name}".`);

      if (product.quantity < 5) {
        console.warn(`"${product.name}" is running low with ${product.quantity} units. Reorder ASAP!`);
      }
    }
  }

  // Restock inventory using restock requests
  restockProduct(restockList: RestockRequest[]): void {
    for (const request of restockList) {
      const product = this.products.find(p => p.id === request.id);

      if (!product) {
        console.error(`Product with ID ${request.id} not found. Cannot restock.`);
        continue;
      }

      product.quantity += request.quantity;
      console.log(`Restocked ${request.quantity} units of "${product.name}".`);
    }
  }
}

// Usage example
const inventory = new Inventory();

// Add products to the inventory
inventory.addProduct([
  { id: 1, name: "item-1", quantity: 20 },
  { id: 2, name: "item-2", quantity: 9 },
  { id: 3, name: "item-3", quantity: 14 }
]);

console.log("Initial Inventory:");
inventory.showProducts();

// Simulate product purchases
inventory.buyProduct([{ id: 1, name: "item-1", quantity: 18 }]);
inventory.buyProduct([{ id: 2, name: "item-2", quantity: 11 }]); // Triggers warning for insufficient quantity
inventory.buyProduct([{ id: 3, name: "item-3", quantity: 8 }]);

// Restock inventory using restock requests
inventory.restockProduct([{ id: 1, quantity: 30 }]);

// Purchase with a new list
const productList: Product[] = [
  { id: 1, name: "item-1", quantity: 10 },
  { id: 2, name: "item-2", quantity: 4 }
];
inventory.buyProduct(productList);

// Attempt to buy all remaining units of "item-2" to trigger reorder warning
inventory.buyProduct([{ id: 2, name: "item-2", quantity: 4 }]);

// Final Inventory state
console.log("Final Inventory:");
inventory.showProducts();


-------------------------------------------------------------------------------------------------------------

let bills = [5, 5, 5, 10, 20];

var lemonadeChange = function (bills) {
  let parts = []; // To store how many $5 bills are needed for each non-$5 bill
  let fives = []; // To keep track of $5 bills

  for (let bill of bills) {
    if (bill === 5) {
      fives.push(5); // Collect $5 bill
    } else {
      // Calculate how many $5 bills are needed as change
      let part = (bill / 5) - 1; // The number of $5 bills needed for change
      parts.push(part);
    }
  }

  // Check if we can provide the required change
  let canProvideChange = helperFunction(fives.length, parts);
  return canProvideChange;
};

function helperFunction(fiveCount, partsArray) {
  for (let part of partsArray) {
    if (fiveCount >= part) {
      // If we have enough $5 bills to give change
      fiveCount -= part; // Use the necessary number of $5 bills
    } else {
      // Not enough $5 bills to give change
      return false;
    }
  }
  return true; // Successfully provided change for all bills
}

console.log(lemonadeChange(bills)); // Output: true
