let jsonData = {
  destinations: [
    { id: 1, name: "City B" },
    { id: 2, name: "City D" },
    { id: 3, name: "City F" },
    { id: 4, name: "City M" },
    { id: 5, name: "City P" },
  ],
  sources: [
    { id: 1, name: "City A" },
    { id: 2, name: "City C" },
    { id: 3, name: "City E" },
    { id: 4, name: "City T" },
    { id: 5, name: "City U" },
    { id: 6, name: "City K" },
  ],
  flights: [
    { flightID: 1, name: "Flight 1", price: 300, sourceID: 1, destinationID: 2, departureDate: "2023-12-15" },
    { flightID: 2, name: "Flight 2", price: 250, sourceID: 3, destinationID: 4, departureDate: "2023-12-18" },
    { flightID: 3, name: "Flight 3", price: 400, sourceID: 5, destinationID: 2, departureDate: "2023-12-20" },
    { flightID: 4, name: "Flight 4", price: 350, sourceID: 2, destinationID: 1, departureDate: "2023-12-22" },
    { flightID: 5, name: "Flight 5", price: 280, sourceID: 4, destinationID: 3, departureDate: "2023-12-25" },
    { flightID: 6, name: "Flight 6", price: 420, sourceID: 6, destinationID: 5, departureDate: "2023-12-28" },
    { flightID: 7, name: "Flight 7", price: 320, sourceID: 1, destinationID: 3, departureDate: "2023-12-30" },
    { flightID: 8, name: "Flight 8", price: 260, sourceID: 3, destinationID: 5, departureDate: "2024-01-02" },
    { flightID: 9, name: "Flight 9", price: 380, sourceID: 5, destinationID: 1, departureDate: "2024-01-05" },
    { flightID: 10, name: "Flight 10", price: 310, sourceID: 2, destinationID: 4, departureDate: "2024-01-08" },
  ]
};

let destinationDetails = jsonData.destinations;
let flightDetails = jsonData.flights;
let sourceDetails = jsonData.sources;
let todaysDate = convertToRequiredFormat("2024-01-02");

$(document).ready(() => {
  // Populate the source and destination dropdowns
  for (let source of sourceDetails) {
    let option = `<option value="${source.id}">${source.name}</option>`
    $("#Source").append(option);
  }

  for (let destination of destinationDetails) {
    let option = `<option value="${destination.id}">${destination.name}</option>`
    $("#Destination").append(option);
  }

  // Populate the flight table
  for (let flight of flightDetails) {
    let result = "";
    let sourceText = "";
    let destinationText = "";
    
    for (let source of sourceDetails) {
      if (flight.sourceID == source.id) {
        sourceText = source.name;
      }
    }
    
    for (let destination of destinationDetails) {
      if (flight.destinationID == destination.id) {
        destinationText = destination.name;
      }
    }

    let tabledata = `
              <tr id="item${flight.flightID}" class="${flight.name.replaceAll(" ", "")}">
                <th scope="row">${flight.name}</th>
                <td>${sourceText}</td>
                <td>${destinationText}</td>
                <td>${flight.price}</td>
                <td><button class="btn btn-primary w-50" id="btnBook${flight.flightID}">Book</button></td>
              </tr>
    `;
    result += tabledata;
    $("#flightDetails").append(result);
  }

  // Search button functionality
  $("#btnSearch").click((e) => {
    e.preventDefault();  // Prevent form submission
    let selectedSource = $("#Source").val();
    let selectedDestination = $("#Destination").val();
    let searchbox = $("#txtSearch").val().trim().toLowerCase();
    let selectedDate = $("#departureDate").val();

    // Hide all rows first
    $("tbody tr").addClass("d-none");

    for (let flight of flightDetails) {
      let sourceMatch = (selectedSource === "" || flight.sourceID == selectedSource);
      let destinationMatch = (selectedDestination === "" || flight.destinationID == selectedDestination);
      let searchboxMatch = (searchbox === "" || flight.name.toLowerCase().includes(searchbox));
      let dateMatch = (selectedDate === "" || flight.departureDate === convertToRequiredFormat(selectedDate));

      // Show flights if they match the search criteria, including date
      if (sourceMatch && destinationMatch && searchboxMatch && dateMatch) {
        $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
      }
    }
  });
});

// Helper function to format the date
function convertToRequiredFormat(date) {
  let orgdate = new Date(date);
  let todaysDay = orgdate.getDate();
  let todaysMonth = orgdate.getMonth() + 1;
  let todaysYear = orgdate.getFullYear();

  if (todaysDay.toString().length == 1) {
    todaysDay = `0${todaysDay}`;
  }
  if (todaysMonth.toString().length == 1) {
    todaysMonth = `0${todaysMonth}`;
  }

  return `${todaysYear}-${todaysMonth}-${todaysDay}`;
}


-----------------------------------------------------------------------------------------------------------------------------------


let jsonData = {
  destinations: [
    { id: 1, name: "City B" },
    { id: 2, name: "City D" },
    { id: 3, name: "City F" },
    { id: 4, name: "City M" },
    { id: 5, name: "City P" },
  ],
  sources: [
    { id: 1, name: "City A" },
    { id: 2, name: "City C" },
    { id: 3, name: "City E" },
    { id: 4, name: "City T" },
    { id: 5, name: "City U" },
    { id: 6, name: "City K" },
  ],
  flights: [
    { flightID: 1, name: "Flight 1", price: 300, sourceID: 1, destinationID: 2, departureDate: "2023-12-15" },
    { flightID: 2, name: "Flight 2", price: 250, sourceID: 3, destinationID: 4, departureDate: "2023-12-18" },
    { flightID: 3, name: "Flight 3", price: 400, sourceID: 5, destinationID: 2, departureDate: "2023-12-20" },
    { flightID: 4, name: "Flight 4", price: 350, sourceID: 2, destinationID: 1, departureDate: "2023-12-22" },
    { flightID: 5, name: "Flight 5", price: 280, sourceID: 4, destinationID: 3, departureDate: "2023-12-25" },
    { flightID: 6, name: "Flight 6", price: 420, sourceID: 6, destinationID: 5, departureDate: "2023-12-28" },
    { flightID: 7, name: "Flight 7", price: 320, sourceID: 1, destinationID: 3, departureDate: "2023-12-30" },
    { flightID: 8, name: "Flight 8", price: 260, sourceID: 3, destinationID: 5, departureDate: "2024-01-02" },
    { flightID: 9, name: "Flight 9", price: 380, sourceID: 5, destinationID: 1, departureDate: "2024-01-05" },
    { flightID: 10, name: "Flight 10", price: 310, sourceID: 2, destinationID: 4, departureDate: "2024-01-08" },
  ]
};

let destinationDetails = jsonData.destinations;
let flightDetails = jsonData.flights;
let sourceDetails = jsonData.sources;
let todaysDate = convertToRequiredFormat("2024-01-02");

$(document).ready(() => {

  for (let source of sourceDetails) {
    let option = `<option value="${source.id}">${source.name}</option>`
    $("#Source").append(option);
  }

  for (let destination of destinationDetails) {
    let option = `<option value="${destination.id}">${destination.name}</option>`
    $("#Destination").append(option);
  }
  for (let flight of flightDetails) {
    let result = ""
    let sourceText = "";
    let destinationText = "";
    for (let source of sourceDetails) {
      if (flight.sourceID == source.id) {
        sourceText = source.name;
      }
    }
    for (let destination of destinationDetails) {
      if (flight.destinationID == destination.id) {
        destinationText = destination.name;
      }
    }
    let tabledata = `
              <tr id="item${flight.flightID}" class="${flight.name.replaceAll(" ", "")}">
                <th scope="row">${flight.name}</th>
                <td>${sourceText}</td>
                <td>${destinationText}</td>
                <td>${flight.price}</td>
                <td><button class="btn btn-primary w-50" id="btnBook${flight.flightID}">Book</button></td>
              </tr>
    `;
    result += tabledata
    $("#flightDetails").append(result);
  }

  $("#btnSearch").click((e) => {
    e.preventDefault();

    let selectedSource = $("#Source").val();
    let selectedDestination = $("#Destination").val();
    let selectedDate = convertToRequiredFormat($("#departureDate").val());
    let searchbox = $("#txtSearch").val();
    $("#flightDetails tr").removeClass("d-none");

    if (searchbox == "") {
      if (selectedSource != "" && selectedDestination == "") {
        for (let flight of flightDetails) {
          $(`.${flight.name.replaceAll(" ", "")}`).addClass("d-none");

          if (flight.sourceID == selectedSource) {
            $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
          }

        }
      } else {
        for (let flight of flightDetails) {
          $(`.${flight.name.replaceAll(" ", "")}`).addClass("d-none");

          if (flight.destinationID == selectedDestination) {
            $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
          }

        }
      }
    } else {
      if (selectedSource == "" && selectedDestination == "") {
        for (let flight of flightDetails) {
          $(`.${flight.name.replaceAll(" ", "")}`).addClass("d-none");

          if (flight.name == searchbox) {
            $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
          }

        }
      } else if (selectedSource != "" && selectedDestination == "") {
        for (let flight of flightDetails) {
          $(`.${flight.name.replaceAll(" ", "")}`).addClass("d-none");

          if (flight.sourceID == selectedSource && flight.name == searchbox) {
            $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
          }

        }
      } else if (selectedSource == "" && selectedDestination != "") {
        for (let flight of flightDetails) {
          $(`.${flight.name.replaceAll(" ", "")}`).addClass("d-none");

          if (flight.destinationID == selectedDestination && flight.name == searchbox) {
            $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
          }

        }
      } else {
        for (let flight of flightDetails) {
          $(`.${flight.name.replaceAll(" ", "")}`).addClass("d-none");

          if (flight.sourceID == selectedSource && flight.destinationID == selectedDestination && flight.name == searchbox) {
            $(`.${flight.name.replaceAll(" ", "")}`).removeClass("d-none");
          }

        }
      }
    }
  });

})

function convertToRequiredFormat(date) {
  let orgdate = new Date(date);
  let todaysDay = orgdate.getDate();
  let todaysMonth = orgdate.getMonth() + 1;
  let todaysYear = orgdate.getFullYear();

  if (todaysDay.toString().length == 1) {
    todaysDay = `0${todaysDay}`;
  }
  if (todaysMonth.toString().length == 1) {
    todaysMonth = `0${todaysMonth}`;
  }

  return `${todaysYear}-${todaysMonth}-${todaysDay}`;
}