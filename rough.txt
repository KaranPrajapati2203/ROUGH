Practice 5

 internal class Program
 {
     static void Main(string[] args)
     {
         //Use Average to calculate the average age of employees in a department.
         List<Employee> employees = new List<Employee>
         {
             new Employee { Id = 1, Name = "Alice", Age = 30, Department = "HR", Salary = 50000 },
             new Employee { Id = 2, Name = "Bob", Age = 40, Department = "IT", Salary = 75000 },
             new Employee { Id = 3, Name = "Charlie", Age = 35, Department = "IT", Salary = 80000 },
             new Employee { Id = 4, Name = "Diana", Age = 28, Department = "HR", Salary = 45000 },
             new Employee { Id = 5, Name = "Edward", Age = 45, Department = "Finance", Salary = 95000 },
             new Employee { Id = 6, Name = "Fiona", Age = 38, Department = "Finance", Salary = 60000 },
             new Employee { Id = 7, Name = "George", Age = 32, Department = "IT", Salary = 85000 },
             new Employee { Id = 8, Name = "Helen", Age = 26, Department = "HR", Salary = 55000 },
             new Employee { Id = 9, Name = "Irene", Age = 50, Department = "Finance", Salary = 100000 },
             new Employee { Id = 10, Name = "Jack", Age = 37, Department = "HR", Salary = 50000 }
         };
         var averageAgeOfEmployees=employees.Average(e => e.Age);
         Console.WriteLine(averageAgeOfEmployees);
         Console.WriteLine("--------------------");

         //Write a LINQ query to find the average grade of students in a class.
         List<Student> students = new List<Student>
         {
             new Student { Id = 1, Name = "Alice", Grade = 88 },
             new Student { Id = 2, Name = "Bob", Grade = 92 },
             new Student { Id = 3, Name = "Charlie", Grade = 85 },
             new Student { Id = 4, Name = "Diana", Grade = 95 },
             new Student { Id = 5, Name = "Edward", Grade = 78 },
             new Student { Id = 6, Name = "Fiona", Grade = 89 },
             new Student { Id = 7, Name = "George", Grade = 91 },
             new Student { Id = 8, Name = "Helen", Grade = 84 },
             new Student { Id = 9, Name = "Irene", Grade = 87 },
             new Student { Id = 10, Name = "Jack", Grade = 90 }
         };
         var averageGradeOfStudents = students.Average(e => e.Grade);
         Console.WriteLine(averageGradeOfStudents);
         Console.WriteLine("--------------------");

         //Calculate the average price of all products in a catalog using LINQ.
         List<Product> products = new List<Product>
         {
             new Product { Id = 1, Name = "Notebook", Price = 15.99m },
             new Product { Id = 2, Name = "Pen", Price = 2.49m },
             new Product { Id = 3, Name = "Backpack", Price = 45.99m },
             new Product { Id = 4, Name = "Ruler", Price = 1.29m },
             new Product { Id = 5, Name = "Marker", Price = 3.49m },
             new Product { Id = 6, Name = "Stapler", Price = 5.99m },
             new Product { Id = 7, Name = "Eraser", Price = 0.99m },
             new Product { Id = 8, Name = "Glue", Price = 2.29m },
             new Product { Id = 9, Name = "Scissors", Price = 6.99m },
             new Product { Id = 10, Name = "Highlighter", Price = 4.49m }
         };
         var averagePriceOfProducts = products.Average(e => e.Price);
         Console.WriteLine(averagePriceOfProducts);
         Console.WriteLine("--------------------");

         //Write a query to compute the average transaction amount from a list of sales.
         List<Transaction> transactions = new List<Transaction>
         {
             new Transaction { Id = 1, Amount = 100.50m },
             new Transaction { Id = 2, Amount = 200.75m },
             new Transaction { Id = 3, Amount = 50.25m },
             new Transaction { Id = 4, Amount = 300.10m },
             new Transaction { Id = 5, Amount = 150.00m },
             new Transaction { Id = 6, Amount = 120.75m },
             new Transaction { Id = 7, Amount = 60.30m },
             new Transaction { Id = 8, Amount = 90.50m },
             new Transaction { Id = 9, Amount = 180.60m },
             new Transaction { Id = 10, Amount = 70.40m }
         };
         var averageTransaction = transactions.Average(e => e.Amount);
         Console.WriteLine(averageTransaction);
         Console.WriteLine("--------------------");

         //Use LINQ to find the average word length in a collection of sentences.
         List<string> sentences = new List<string>
         {
             "This is a sentence.",
             "LINQ queries are powerful.",
             "C# makes programming easy.",
             "The quick brown fox jumps over the lazy dog.",
             "Practice makes perfect.",
             "I love learning new things.",
             "The sun is shining.",
             "She is a great programmer.",
             "I enjoy solving problems.",
             "Coding is fun and rewarding."
         };
         var averageWordLength = sentences.Average(e => e.Split(" ").Length);
         Console.WriteLine(averageWordLength);
         Console.WriteLine("--------------------");
     }
 }

 public class Employee
 {
     public int Id { get; set; }
     public string Name { get; set; }
     public int Age { get; set; }
     public string Department { get; set; }
     public decimal Salary { get; set; }
 }

 public class Student
 {
     public int Id { get; set; }
     public string Name { get; set; }
     public int Grade { get; set; }
 }

 public class Product
 {
     public int Id { get; set; }
     public string Name { get; set; }
     public decimal Price { get; set; }
 }

 public class Transaction
 {
     public int Id { get; set; }
     public decimal Amount { get; set; }
 }

-------------------------------------------------------------------------------------------------

Practice 6

internal class Program
{
    static void Main(string[] args)
    {
        //Use Count to find the number of products in a list with a price greater than $50.
        List<Product> products = new List<Product>
        {
            new Product { Id = 1, Name = "Notebook", Price = 15.99m },
            new Product { Id = 2, Name = "Pen", Price = 2.49m },
            new Product { Id = 3, Name = "Backpack", Price = 45.99m },
            new Product { Id = 4, Name = "Ruler", Price = 1.29m },
            new Product { Id = 5, Name = "Marker", Price = 3.49m },
            new Product { Id = 6, Name = "Stapler", Price = 5.99m },
            new Product { Id = 7, Name = "Eraser", Price = 0.99m },
            new Product { Id = 8, Name = "Glue", Price = 2.29m },
            new Product { Id = 9, Name = "Scissors", Price = 6.99m },
            new Product { Id = 10, Name = "Highlighter", Price = 400.49m }
        };
        var priceCount = products.Count(x => x.Price > 50);
        Console.WriteLine(priceCount);
        Console.WriteLine("--------------------");

        //Write a LINQ query to count the number of students enrolled in a specific course.
        List<Student> students = new List<Student>
        {
            new Student { Id = 1, Name = "Alice", Course = "Math" },
            new Student { Id = 2, Name = "Bob", Course = "English" },
            new Student { Id = 3, Name = "Charlie", Course = "Math" },
            new Student { Id = 4, Name = "Diana", Course = "History" },
            new Student { Id = 5, Name = "Edward", Course = "Math" },
            new Student { Id = 6, Name = "Fiona", Course = "Science" },
            new Student { Id = 7, Name = "George", Course = "English" },
            new Student { Id = 8, Name = "Helen", Course = "Math" },
            new Student { Id = 9, Name = "Irene", Course = "History" },
            new Student { Id = 10, Name = "Jack", Course = "Science" }
        };
        string courseName = "Math";
        var studentCount = students.Count(x => x.Course == courseName);
        Console.WriteLine(studentCount);
        Console.WriteLine("--------------------");

        //Use Count to find how many numbers in a list are divisible by 3.
        List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        var numDivisibleBy3 = numbers.Count(x => x % 3 == 0);
        Console.WriteLine(numDivisibleBy3);
        Console.WriteLine("--------------------");

        //Implement a query to count the number of orders placed in the last 7 days.
        List<Order> orders = new List<Order>
        {
            new Order { Id = 1, OrderDate = DateTime.Now.AddDays(-1) },
            new Order { Id = 2, OrderDate = DateTime.Now.AddDays(-2) },
            new Order { Id = 3, OrderDate = DateTime.Now.AddDays(-3) },
            new Order { Id = 4, OrderDate = DateTime.Now.AddDays(-4) },
            new Order { Id = 5, OrderDate = DateTime.Now.AddDays(-5) },
            new Order { Id = 6, OrderDate = DateTime.Now.AddDays(-6) },
            new Order { Id = 7, OrderDate = DateTime.Now.AddDays(-7) },
            new Order { Id = 8, OrderDate = DateTime.Now.AddDays(-8) },
            new Order { Id = 9, OrderDate = DateTime.Now.AddDays(-9) },
            new Order { Id = 10, OrderDate = DateTime.Now.AddDays(-10) }
        };
        var last7DaysOrders = orders.Count(x => x.OrderDate >= DateTime.Now.AddDays(-7));
        Console.WriteLine(last7DaysOrders);
        Console.WriteLine("--------------------");

        //Use Count to determine how many employees in a company belong to a specific department.
        List<Employee> employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "Alice", Department = "HR" },
            new Employee { Id = 2, Name = "Bob", Department = "IT" },
            new Employee { Id = 3, Name = "Charlie", Department = "HR" },
            new Employee { Id = 4, Name = "Diana", Department = "IT" },
            new Employee { Id = 5, Name = "Edward", Department = "Finance" },
            new Employee { Id = 6, Name = "Fiona", Department = "Finance" },
            new Employee { Id = 7, Name = "George", Department = "IT" },
            new Employee { Id = 8, Name = "Helen", Department = "HR" },
            new Employee { Id = 9, Name = "Irene", Department = "Finance" },
            new Employee { Id = 10, Name = "Jack", Department = "HR" }
        };
        string department = "IT";
        var countSpecificDepartment = employees.Count(x => x.Department == department);
        Console.WriteLine(countSpecificDepartment);
        Console.WriteLine("--------------------");
    }
}

public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}

public class Student
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Course { get; set; }
}

public class Order
{
    public int Id { get; set; }
    public DateTime OrderDate { get; set; }
}

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Department { get; set; }
}

---------------------------------------------------------------------------------------------------------------

Practice 7

internal class Program
{
    static void Main(string[] args)
    {
        //Use Single to find the product with a unique ID from a product list.Throw an exception if not found.
        List<Product> products = new List<Product>
        {
            new Product { Id = 1, Name = "Notebook", Price = 15.99m },
            new Product { Id = 2, Name = "Pen", Price = 2.49m },
            new Product { Id = 3, Name = "Backpack", Price = 45.99m },
            new Product { Id = 4, Name = "Ruler", Price = 1.29m },
            new Product { Id = 5, Name = "Marker", Price = 3.49m },
            new Product { Id = 6, Name = "Stapler", Price = 5.99m },
            new Product { Id = 7, Name = "Eraser", Price = 0.99m },
            new Product { Id = 8, Name = "Glue", Price = 2.29m },
            new Product { Id = 9, Name = "Scissors", Price = 6.99m },
            new Product { Id = 10, Name = "Highlighter", Price = 4.49m }
        };
        int targetId = 5;
        try
        {
            var uniqueProduct = products.Single(p => p.Id == targetId);
            Console.WriteLine(JsonSerializer.Serialize(uniqueProduct));
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine("Error: The product was not found or there are multiple products with the same ID.");
        }
        Console.WriteLine("-------------------");

        //Use SingleOrDefault to retrieve a user from a list by their unique username. Return null if no match is found.
        List<User> users = new List<User>
        {
            new User { Id = 1, Username = "alice123", Email = "alice@example.com" },
            new User { Id = 2, Username = "bob456", Email = "bob@example.com" },
            new User { Id = 3, Username = "charlie789", Email = "charlie@example.com" },
            new User { Id = 4, Username = "diana012", Email = "diana@example.com" },
            new User { Id = 5, Username = "edward345", Email = "edward@example.com" },
            new User { Id = 6, Username = "fiona678", Email = "fiona@example.com" },
            new User { Id = 7, Username = "george901", Email = "george@example.com" },
            new User { Id = 8, Username = "helen234", Email = "helen@example.com" },
            new User { Id = 9, Username = "irene567", Email = "irene@example.com" },
            new User { Id = 10, Username = "jack890", Email = "jack@example.com" }
        };
        string targetUsername = "edward345";
        var uniqueUser = users.SingleOrDefault(x => x.Username == targetUsername);
        Console.WriteLine(JsonSerializer.Serialize(uniqueUser));
        Console.WriteLine("--------------------");

        //Write a query to find the student with a unique roll number from a list of students.
        List<Student> students = new List<Student>
        {
            new Student { RollNumber = "A123", Name = "Alice", Grade = 88 },
            new Student { RollNumber = "B456", Name = "Bob", Grade = 92 },
            new Student { RollNumber = "C789", Name = "Charlie", Grade = 85 },
            new Student { RollNumber = "D012", Name = "Diana", Grade = 95 },
            new Student { RollNumber = "E345", Name = "Edward", Grade = 78 },
            new Student { RollNumber = "F678", Name = "Fiona", Grade = 89 },
            new Student { RollNumber = "G901", Name = "George", Grade = 91 },
            new Student { RollNumber = "H234", Name = "Helen", Grade = 84 },
            new Student { RollNumber = "I567", Name = "Irene", Grade = 87 },
            new Student { RollNumber = "J890", Name = "Jack", Grade = 90 }
        };
        string targetRollNo = "Bond007";
        var uniqueStudent = students.SingleOrDefault(x => x.RollNumber == targetRollNo);
        Console.WriteLine(JsonSerializer.Serialize(uniqueStudent));
        Console.WriteLine("--------------------");

        //Use SingleOrDefault to retrieve a transaction from a list with a specific transaction ID.
        //Ensure the code handles cases with no match.
        List<Transaction> transactions = new List<Transaction>
        {
            new Transaction { TransactionId = "T001", Amount = 100.50m },
            new Transaction { TransactionId = "T002", Amount = 200.75m },
            new Transaction { TransactionId = "T003", Amount = 50.25m },
            new Transaction { TransactionId = "T004", Amount = 300.10m },
            new Transaction { TransactionId = "T005", Amount = 150.00m },
            new Transaction { TransactionId = "T006", Amount = 120.75m },
            new Transaction { TransactionId = "T007", Amount = 60.30m },
            new Transaction { TransactionId = "T008", Amount = 90.50m },
            new Transaction { TransactionId = "T009", Amount = 180.60m },
            new Transaction { TransactionId = "T010", Amount = 70.40m }
        };
        string targetTransactionID = "T0002";
        var uniqueTransaction = transactions.SingleOrDefault(x => x.TransactionId == targetTransactionID);
        if (uniqueTransaction != null)
        {
            Console.WriteLine(JsonSerializer.Serialize(uniqueTransaction));
        }
        else
        {
            Console.WriteLine("No Transaction Found!!");
        }
        Console.WriteLine("--------------------");

        //Use Single to find the book with a unique ISBN from a catalog.
        List<Book> books = new List<Book>
        {
            new Book { ISBN = "978-3-16-148410-0", Title = "The Great Book" },
            new Book { ISBN = "978-0-06-112241-5", Title = "Learning C#" },
            new Book { ISBN = "978-1-4028-9462-6", Title = "The Art of Programming" },
            new Book { ISBN = "978-0-201-63361-0", Title = "Introduction to Algorithms" },
            new Book { ISBN = "978-1-56619-909-4", Title = "Clean Code" },
            new Book { ISBN = "978-0-262-13472-9", Title = "Design Patterns" },
            new Book { ISBN = "978-0-13-235088-4", Title = "Code Complete" },
            new Book { ISBN = "978-1-59327-592-9", Title = "The Pragmatic Programmer" },
            new Book { ISBN = "978-0-321-63550-2", Title = "Effective Java" },
            new Book { ISBN = "978-0-596-52068-7", Title = "Head First Design Patterns" }
        };
        string targetISBN = "978-0-262-13472-9";
        var uniqueISBN = books.SingleOrDefault(x => x.ISBN == targetISBN);
        Console.WriteLine(JsonSerializer.Serialize(uniqueISBN));
        Console.WriteLine("--------------------");
    }
}
public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public decimal Price { get; set; }
}

public class User
{
    public int Id { get; set; }
    public string Username { get; set; }
    public string Email { get; set; }
}

public class Student
{
    public string RollNumber { get; set; }
    public string Name { get; set; }
    public int Grade { get; set; }
}

public class Transaction
{
    public string TransactionId { get; set; }
    public decimal Amount { get; set; }
}

public class Book
{
    public string ISBN { get; set; }
    public string Title { get; set; }
}

-------------------------------------------------------------------------------------------------------------------

Practice 8

internal class Program
{
    static void Main(string[] args)
    {
        //Use DefaultIfEmpty to handle cases where a query to find high - priority tasks returns no results.
        List<Task> tasks = new List<Task>
        {
            new Task { Id = 1, Name = "Design Website", Priority = "High" },
            new Task { Id = 2, Name = "Write Documentation", Priority = "Low" },
            new Task { Id = 3, Name = "Fix Bugs", Priority = "Medium" },
            new Task { Id = 4, Name = "Test Features", Priority = "High" },
            new Task { Id = 5, Name = "Develop Backend", Priority = "Medium" },
            new Task { Id = 6, Name = "Refactor Code", Priority = "High" },
            new Task { Id = 7, Name = "Implement Authentication", Priority = "High" },
            new Task { Id = 8, Name = "Deploy to Server", Priority = "Low" },
            new Task { Id = 9, Name = "Write Unit Tests", Priority = "Medium" },
            new Task { Id = 10, Name = "Optimize Performance", Priority = "High" }
        };
        var highPriorityTasks = tasks.Where(t => t.Priority == "Very High")
                                     .DefaultIfEmpty(new Task { Id = 0, Name = "No Tasks Found", Priority = "N/A" });
        foreach (var task in highPriorityTasks)
        {
            Console.WriteLine(JsonSerializer.Serialize(task));
        }
        Console.WriteLine("--------------------");

        //Write a LINQ query to find products in a specific category.Return a default message if the category is empty.
        List<Product> products = new List<Product>
        {
            new Product { Id = 1, Name = "Laptop", Category = "Electronics", Price = 1000m },
            new Product { Id = 2, Name = "Smartphone", Category = "Electronics", Price = 800m },
            new Product { Id = 3, Name = "Headphones", Category = "Electronics", Price = 150m },
            new Product { Id = 4, Name = "Sofa", Category = "Furniture", Price = 500m },
            new Product { Id = 5, Name = "Coffee Table", Category = "Furniture", Price = 100m },
            new Product { Id = 6, Name = "Dining Set", Category = "Furniture", Price = 300m },
            new Product { Id = 7, Name = "T-Shirt", Category = "Clothing", Price = 25m },
            new Product { Id = 8, Name = "Jeans", Category = "Clothing", Price = 50m },
            new Product { Id = 9, Name = "Sneakers", Category = "Clothing", Price = 80m },
            new Product { Id = 10, Name = "Jacket", Category = "Clothing", Price = 120m }
        };
        var productInfo = products.Where(p => p.Category == "Sports")
                                  .DefaultIfEmpty(new Product { Id = 0, Name = "No Products Found", Category = "N/A", Price = 0 });
        foreach (var info in productInfo)
        {
            Console.WriteLine(JsonSerializer.Serialize(info));
        }
        Console.WriteLine("--------------------");

        //Use DefaultIfEmpty to ensure a collection of employees in a department always returns at least one placeholder.
        List<Employee> employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "Alice", Department = "HR" },
            new Employee { Id = 2, Name = "Bob", Department = "IT" },
            new Employee { Id = 3, Name = "Charlie", Department = "HR" },
            new Employee { Id = 4, Name = "Diana", Department = "IT" },
            new Employee { Id = 5, Name = "Edward", Department = "Finance" },
            new Employee { Id = 6, Name = "Fiona", Department = "Finance" },
            new Employee { Id = 7, Name = "George", Department = "IT" },
            new Employee { Id = 8, Name = "Helen", Department = "HR" },
            new Employee { Id = 9, Name = "Irene", Department = "Finance" },
            new Employee { Id = 10, Name = "Jack", Department = "HR" }
        };
        var EmployeeInfo = employees.Where(e => e.Department == "Sales")
                                  .DefaultIfEmpty(new Employee { Id = 0, Name = "No Products Found", Department = "No Department Found" });
        foreach (var info in EmployeeInfo)
        {
            Console.WriteLine(JsonSerializer.Serialize(info));
        }
        Console.WriteLine("--------------------");

        //Write a LINQ query to retrieve all orders for a specific date and return "No Orders Found" if none exist.
        List<Order> orders = new List<Order>
        {
            new Order { Id = 1, OrderDate = DateTime.Now.AddDays(-1) },
            new Order { Id = 2, OrderDate = DateTime.Now.AddDays(-2) },
            new Order { Id = 3, OrderDate = DateTime.Now.AddDays(-3) },
            new Order { Id = 4, OrderDate = DateTime.Now.AddDays(-4) },
            new Order { Id = 5, OrderDate = DateTime.Now.AddDays(-5) },
            new Order { Id = 6, OrderDate = DateTime.Now.AddDays(-6) },
            new Order { Id = 7, OrderDate = DateTime.Now.AddDays(-7) },
            new Order { Id = 8, OrderDate = DateTime.Now.AddDays(-8) },
            new Order { Id = 9, OrderDate = DateTime.Now.AddDays(-9) },
            new Order { Id = 10, OrderDate = DateTime.Now.AddDays(-10) }
        };
        var orderInfo = orders.Where(o => o.OrderDate >= DateTime.Now.AddDays(-3))
                                  .DefaultIfEmpty(new Order { Id = 0, OrderDate = DateTime.MinValue });
        foreach (var info in orderInfo)
        {
            Console.WriteLine(JsonSerializer.Serialize(info));
        }
        Console.WriteLine("--------------------");

        //Use DefaultIfEmpty to provide a default value when filtering a list of customers.
        List<Customer> customers = new List<Customer>
        {
            new Customer { Id = 1, Name = "Alice", City = "New York" },
            new Customer { Id = 2, Name = "Bob", City = "Los Angeles" },
            new Customer { Id = 3, Name = "Charlie", City = "Chicago" },
            new Customer { Id = 4, Name = "Diana", City = "Miami" },
            new Customer { Id = 5, Name = "Edward", City = "Dallas" },
            new Customer { Id = 6, Name = "Fiona", City = "Boston" },
            new Customer { Id = 7, Name = "George", City = "San Francisco" },
            new Customer { Id = 8, Name = "Helen", City = "Chicago" },
            new Customer { Id = 9, Name = "Irene", City = "Los Angeles" },
            new Customer { Id = 10, Name = "Jack", City = "New York" }
        };
        var customerInfo = customers.Where(c => c.City == "Ahmedabad")
                                  .DefaultIfEmpty(new Customer { Id = 0, Name = "Name Not Found",City="City Not Found" });
        foreach (var info in customerInfo)
        {
            Console.WriteLine(JsonSerializer.Serialize(info));
        }
        Console.WriteLine("--------------------");
    }
}
public class Task
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Priority { get; set; }
}

public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Category { get; set; }
    public decimal Price { get; set; }
}

public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Department { get; set; }
}

public class Order
{
    public int Id { get; set; }
    public DateTime OrderDate { get; set; }
}

public class Customer
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string City { get; set; }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

public class Customer
{
    public int CustomerId { get; set; }
    public string Name { get; set; }
    public string City { get; set; }
    public bool IsPremium { get; set; }
}

public class Product
{
    public int ProductId { get; set; }
    public string ProductName { get; set; }
    public string Category { get; set; }
    public decimal Price { get; set; }
    public int Stock { get; set; }
}

public class Order
{
    public int OrderId { get; set; }
    public int CustomerId { get; set; }
    public int ProductId { get; set; }
    public int Quantity { get; set; }
    public DateTime OrderDate { get; set; }
}

public class Program
{
    public static void Main()
    {
        // Data for Customers
        List<Customer> customers = new List<Customer>
        {
            new Customer { CustomerId = 1, Name = "Alice", City = "New York", IsPremium = true },
            new Customer { CustomerId = 2, Name = "Bob", City = "Los Angeles", IsPremium = false },
            new Customer { CustomerId = 3, Name = "Charlie", City = "Chicago", IsPremium = true },
            new Customer { CustomerId = 4, Name = "Diana", City = "Houston", IsPremium = false },
            new Customer { CustomerId = 5, Name = "Edward", City = "Phoenix", IsPremium = true },
            new Customer { CustomerId = 6, Name = "Fiona", City = "San Francisco", IsPremium = false },
            new Customer { CustomerId = 7, Name = "George", City = "New York", IsPremium = true },
            new Customer { CustomerId = 8, Name = "Helen", City = "Los Angeles", IsPremium = false },
            new Customer { CustomerId = 9, Name = "Irene", City = "Chicago", IsPremium = true },
            new Customer { CustomerId = 10, Name = "Jack", City = "Houston", IsPremium = false }
        };

        // Data for Products
        List<Product> products = new List<Product>
        {
            new Product { ProductId = 1, ProductName = "Laptop", Category = "Electronics", Price = 1200.99m, Stock = 15 },
            new Product { ProductId = 2, ProductName = "Smartphone", Category = "Electronics", Price = 899.49m, Stock = 25 },
            new Product { ProductId = 3, ProductName = "Headphones", Category = "Electronics", Price = 199.99m, Stock = 50 },
            new Product { ProductId = 4, ProductName = "Sofa", Category = "Furniture", Price = 499.99m, Stock = 8 },
            new Product { ProductId = 5, ProductName = "Dining Table", Category = "Furniture", Price = 799.99m, Stock = 5 },
            new Product { ProductId = 6, ProductName = "T-Shirt", Category = "Clothing", Price = 25.99m, Stock = 100 },
            new Product { ProductId = 7, ProductName = "Jeans", Category = "Clothing", Price = 49.99m, Stock = 75 },
            new Product { ProductId = 8, ProductName = "Jacket", Category = "Clothing", Price = 99.99m, Stock = 30 },
            new Product { ProductId = 9, ProductName = "Blender", Category = "Kitchen", Price = 89.99m, Stock = 40 },
            new Product { ProductId = 10, ProductName = "Toaster", Category = "Kitchen", Price = 49.99m, Stock = 35 }
        };

        // Data for Orders
        List<Order> orders = new List<Order>
        {
            new Order { OrderId = 1, CustomerId = 1, ProductId = 1, Quantity = 1, OrderDate = DateTime.Now.AddDays(-2) },
            new Order { OrderId = 2, CustomerId = 2, ProductId = 2, Quantity = 2, OrderDate = DateTime.Now.AddDays(-5) },
            new Order { OrderId = 3, CustomerId = 3, ProductId = 3, Quantity = 1, OrderDate = DateTime.Now.AddDays(-1) },
            new Order { OrderId = 4, CustomerId = 4, ProductId = 4, Quantity = 1, OrderDate = DateTime.Now.AddDays(-10) },
            new Order { OrderId = 5, CustomerId = 5, ProductId = 5, Quantity = 2, OrderDate = DateTime.Now.AddDays(-7) },
            new Order { OrderId = 6, CustomerId = 6, ProductId = 6, Quantity = 5, OrderDate = DateTime.Now.AddDays(-3) },
            new Order { OrderId = 7, CustomerId = 7, ProductId = 7, Quantity = 3, OrderDate = DateTime.Now.AddDays(-15) },
            new Order { OrderId = 8, CustomerId = 8, ProductId = 8, Quantity = 4, OrderDate = DateTime.Now.AddDays(-20) },
            new Order { OrderId = 9, CustomerId = 9, ProductId = 9, Quantity = 1, OrderDate = DateTime.Now.AddDays(-30) },
            new Order { OrderId = 10, CustomerId = 10, ProductId = 10, Quantity = 1, OrderDate = DateTime.Now.AddDays(-25) }
        };

        // LINQ Queries can be performed here as required.
        Console.WriteLine("Data generated successfully!");
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;

public class Student
{
    public int StudentId { get; set; }
    public string Name { get; set; }
    public int Age { get; set; }
    public string Gender { get; set; }
    public string Department { get; set; }
}

public class Course
{
    public int CourseId { get; set; }
    public string CourseName { get; set; }
    public string Department { get; set; }
}

public class Enrollment
{
    public int EnrollmentId { get; set; }
    public int StudentId { get; set; }
    public int CourseId { get; set; }
    public DateTime EnrollmentDate { get; set; }
}

public class Program
{
    public static void Main()
    {
        // Data for Students
        List<Student> students = new List<Student>
        {
            new Student { StudentId = 1, Name = "Alice", Age = 22, Gender = "Female", Department = "Computer Science" },
            new Student { StudentId = 2, Name = "Bob", Age = 19, Gender = "Male", Department = "Mathematics" },
            new Student { StudentId = 3, Name = "Charlie", Age = 21, Gender = "Male", Department = "Physics" },
            new Student { StudentId = 4, Name = "Diana", Age = 23, Gender = "Female", Department = "Computer Science" },
            new Student { StudentId = 5, Name = "Edward", Age = 20, Gender = "Male", Department = "Mathematics" },
            new Student { StudentId = 6, Name = "Fiona", Age = 22, Gender = "Female", Department = "Biology" },
            new Student { StudentId = 7, Name = "George", Age = 24, Gender = "Male", Department = "Physics" },
            new Student { StudentId = 8, Name = "Helen", Age = 25, Gender = "Female", Department = "Mathematics" },
            new Student { StudentId = 9, Name = "Irene", Age = 20, Gender = "Female", Department = "Biology" },
            new Student { StudentId = 10, Name = "Jack", Age = 18, Gender = "Male", Department = "Computer Science" }
        };

        // Data for Courses
        List<Course> courses = new List<Course>
        {
            new Course { CourseId = 1, CourseName = "Data Structures", Department = "Computer Science" },
            new Course { CourseId = 2, CourseName = "Calculus", Department = "Mathematics" },
            new Course { CourseId = 3, CourseName = "Linear Algebra", Department = "Mathematics" },
            new Course { CourseId = 4, CourseName = "Quantum Mechanics", Department = "Physics" },
            new Course { CourseId = 5, CourseName = "Thermodynamics", Department = "Physics" },
            new Course { CourseId = 6, CourseName = "Genetics", Department = "Biology" },
            new Course { CourseId = 7, CourseName = "Biochemistry", Department = "Biology" },
            new Course { CourseId = 8, CourseName = "Artificial Intelligence", Department = "Computer Science" },
            new Course { CourseId = 9, CourseName = "Machine Learning", Department = "Computer Science" },
            new Course { CourseId = 10, CourseName = "Statistics", Department = "Mathematics" }
        };

        // Data for Enrollments
        List<Enrollment> enrollments = new List<Enrollment>
        {
            new Enrollment { EnrollmentId = 1, StudentId = 1, CourseId = 1, EnrollmentDate = DateTime.Now.AddMonths(-2) },
            new Enrollment { EnrollmentId = 2, StudentId = 1, CourseId = 8, EnrollmentDate = DateTime.Now.AddMonths(-1) },
            new Enrollment { EnrollmentId = 3, StudentId = 2, CourseId = 2, EnrollmentDate = DateTime.Now.AddMonths(-3) },
            new Enrollment { EnrollmentId = 4, StudentId = 3, CourseId = 4, EnrollmentDate = DateTime.Now.AddMonths(-1) },
            new Enrollment { EnrollmentId = 5, StudentId = 4, CourseId = 9, EnrollmentDate = DateTime.Now.AddMonths(-2) },
            new Enrollment { EnrollmentId = 6, StudentId = 5, CourseId = 3, EnrollmentDate = DateTime.Now.AddMonths(-4) },
            new Enrollment { EnrollmentId = 7, StudentId = 6, CourseId = 7, EnrollmentDate = DateTime.Now.AddMonths(-1) },
            new Enrollment { EnrollmentId = 8, StudentId = 7, CourseId = 5, EnrollmentDate = DateTime.Now.AddMonths(-3) },
            new Enrollment { EnrollmentId = 9, StudentId = 8, CourseId = 3, EnrollmentDate = DateTime.Now.AddMonths(-2) },
            new Enrollment { EnrollmentId = 10, StudentId = 9, CourseId = 6, EnrollmentDate = DateTime.Now.AddMonths(-1) }
        };

        // LINQ Queries can be performed here as required.
        Console.WriteLine("Data generated successfully!");
    }
}
