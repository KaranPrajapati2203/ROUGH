public class Student
{
    public int StudentId { get; set; }

    [Required(ErrorMessage = "Name is required")]
    public string Name { get; set; }

    [Range(5, 100, ErrorMessage = "Age must be between 5 and 100")]
    public int Age { get; set; }

    [RegularExpression("[A-F]", ErrorMessage = "Enter grade between A-F only")]
    public char Grade { get; set; }
}

---------------------------------------------------------------------------------------------------------

 public List<Student> GetStudents();
 public Student GetStudentById(int id);
 public void AddStudent(Student student);
 public void UpdateStudent(Student student);

---------------------------------------------------------------------------------------------------------

 public List<Student> GetStudents()
 {
     return students;
 }

 public Student GetStudentById(int id)
 {
     var student = students.Where(x => x.StudentId == id).FirstOrDefault();
     return student;
 }

 public void AddStudent(Student student)
 {
     students.Add(student);
 }

 public void UpdateStudent(Student student)
 {
     var index = students.FindIndex(x => x.StudentId == student.StudentId);
     if (index != -1)
     {
         students[index] = student;
     }
 }

------------------------------------------------------------------------------------------------------------

using Day13_Assignment1.Services;
using Microsoft.AspNetCore.Mvc;

namespace Day13_Assignment1.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class studentsController : ControllerBase
    {
        private readonly IStudent studentrepo;
        public studentsController(IStudent repo)
        {
            studentrepo = repo;
        }

        [HttpGet]
        public IActionResult GetStudents()
        {
            var students = studentrepo.GetStudents();
            if (students.Count > 0)
            {
                return Ok(studentrepo.GetStudents());
            }
            else
            {
                return Ok("No students found.");
            }
        }

        [HttpGet("{id}")]
        public IActionResult GetStudent(int id)
        {
            var student = studentrepo.GetStudentById(id);
            if (student != null)
            {
                return Ok(student);
            }
            else
            {
                return StatusCode(404, $"Student with id '{id}' does not exist");
            }
        }

        [HttpPost]
        public IActionResult AddStudent(Student student)
        {
            if (ModelState.IsValid)
            {
                studentrepo.AddStudent(student);
                return Created($"/students/{student.StudentId}", student);
            }
            else
            {
                return BadRequest(ModelState);
            }
        }

        [HttpPut("{id}")]
        public IActionResult UpdateStudent(int id, [FromBody] Student studentToUpdate)
        {
            var student = studentrepo.GetStudentById(id);
            if (student != null)
            {
                if (!string.IsNullOrEmpty(studentToUpdate.Name))
                {
                    student.Name = studentToUpdate.Name;
                }
                if (studentToUpdate.Age !> 0)
                {
                    student.Age = studentToUpdate.Age;
                }
                if (student.Grade != '\0')
                {
                    student.Grade = studentToUpdate.Grade;
                }

                studentrepo.UpdateStudent(student);
                return Ok($"Student with id '{id}' has been updated successfully.");
            }
            else
            {
                return StatusCode(404, $"Student with id '{id}' does not exist");
            }
        }
    }
}
