SELECT 
    first_name, 
    FORMAT(salary, '$##########') AS 'SALARY'
FROM employees;

----------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Passenger List</title>
  <style>
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px;
    }
    th {
      background-color: #f2f2f2;
    }
  </style>
</head>
<body>

  <h1>Passenger List</h1>

  <input type="text" id="searchInput" placeholder="Enter Passenger ID" />
  <button id="search">Search</button>

  <table id="passengerTable">
    <thead>
      <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Address</th>
        <th>State</th>
        <th>City</th>
      </tr>
    </thead>
    <tbody>
      <!-- Rows will be dynamically inserted here -->
    </tbody>
  </table>

  <script src="script.js" type="module"></script>
</body>
</html>


----------------------------------------------------------------------------------------

// Define Passenger type to ensure type safety
type Passenger = {
  ID: number;
  Name: string;
  Address: string;
  State: string;
  City: string;
};

// Sample data
const data: Passenger[] = [
  {
    ID: 1,
    Name: "John Doe",
    Address: "123 Main St",
    State: "California",
    City: "Los Angeles",
  },
  {
    ID: 2,
    Name: "Jane Smith",
    Address: "456 Elm St",
    State: "New York",
    City: "New York City",
  },
  {
    ID: 3,
    Name: "Alice Johnson",
    Address: "789 Oak St",
    State: "Texas",
    City: "Houston",
  },
];

// Create a Map with ID as key and Passenger object as value
const passengerMap: Map<number, Passenger> = new Map();
data.forEach((passenger) => {
  passengerMap.set(passenger.ID, passenger);
});

// Function to render passengers in the table
const renderTable = (passengers: Passenger[]) => {
  const tbody = document.querySelector<HTMLTableSectionElement>("#passengerTable tbody");
  if (tbody) {
    tbody.innerHTML = ""; // Clear existing rows
    passengers.forEach((passenger) => {
      const row = document.createElement("tr");
      row.id = `passenger${passenger.ID}`; // Set row control id

      row.innerHTML = `
        <td>${passenger.ID}</td>
        <td>${passenger.Name}</td>
        <td>${passenger.Address}</td>
        <td>${passenger.State}</td>
        <td>${passenger.City}</td>
      `;
      tbody.appendChild(row);
    });
  }
};

// Render all passengers initially
renderTable(data);

// Search functionality
const searchInput = document.querySelector<HTMLInputElement>("#searchInput");
const searchButton = document.querySelector<HTMLButtonElement>("#search");

searchButton?.addEventListener("click", () => {
  const searchValue = searchInput?.value;
  if (searchValue) {
    const passengerID = parseInt(searchValue);
    const passenger = passengerMap.get(passengerID);
    if (passenger) {
      renderTable([passenger]); // Render only the matching passenger
    } else {
      alert("Passenger not found.");
    }
  } else {
    renderTable(data); // Render all passengers if input is empty
  }
});
