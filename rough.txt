interface VacancyDetails {
    id: number | string;
    title: string;
    description: string;
    numberOfOpenings: number | string;
}

interface ApplicantDetails {
    id: number | string;
    title: string;
    candidateName: string;
    candidateEmail: string;
    candidateExperience: number | string;
    numberOfOpenings: number | string;
}

class JobPortal {
    private vacancyDetailsArray: VacancyDetails[];
    private applicationDetailsArray: ApplicantDetails[];

    constructor(vacancy: VacancyDetails[], application: ApplicantDetails[]) {
        this.vacancyDetailsArray = vacancy;
        this.applicationDetailsArray = application;
        this.setVacancyTableData();
        this.setApplicationTableData();
    }

    createVacancy(vacancyObject: VacancyDetails) {
        this.vacancyDetailsArray.push(vacancyObject);
        localStorage.setItem("vacancyTableData", JSON.stringify(this.vacancyDetailsArray));
        this.vacancyDetailsArray = JSON.parse(localStorage.getItem("vacancyTableData") || "[]");
        this.setVacancyTableData();
    }

    setVacancyTableData() {
        let result = "";
        if (localStorage.getItem("vacancyTableData")) {
            for (let vacancy of this.vacancyDetailsArray) {
                let tableData = `
                <tr id="row-${vacancy.id}">
                    <th scope="row">${vacancy.id}</th>
                    <td id="title-${vacancy.id}">${vacancy.title}</td>
                    <td id="description-${vacancy.id}">${vacancy.description}</td>
                    <td id="opening-${vacancy.id}">${vacancy.numberOfOpenings}</td>
                    <td><a href="#applysection"><button class="btn btn-outline-primary" onclick="jobPortal.setApplyData(${vacancy.id})">Apply</button></a></td>
                </tr>`;
                result += tableData;
            }
            (<HTMLTableElement>document.getElementById("vacancytbody")).innerHTML = result;
        } else {
            let tbody = <HTMLTableElement>document.getElementById("vacancytbody");
            tbody.classList.add("text-center");
            let tr = document.createElement("tr");
            tr.innerHTML = `<td colspan="5">No Data Available!!</td>`;
            tbody.appendChild(tr);
        }
    }

    setApplyData(id: string) {
        document.getElementById("applysection")?.classList.remove("d-none");
        let title = (<HTMLInputElement>document.getElementById(`title-${id}`)).textContent;
        let description = (<HTMLInputElement>document.getElementById(`description-${id}`)).textContent;
        let opening = (<HTMLInputElement>document.getElementById(`opening-${id}`)).textContent;

        (<HTMLFormElement>document.getElementById("applyjobid")).value = id;
        (<HTMLFormElement>document.getElementById("applyjobtitle")).value = title;
        (<HTMLFormElement>document.getElementById("applyjobdescription")).value = description;
        (<HTMLFormElement>document.getElementById("applynumberofopenings")).value = opening;
    }

    createApplication(applicationObject: ApplicantDetails) {
        this.applicationDetailsArray.push(applicationObject);
        localStorage.setItem("applicantTableData", JSON.stringify(this.applicationDetailsArray));
        this.applicationDetailsArray = JSON.parse(localStorage.getItem("applicantTableData") || "[]");
        this.setApplicationTableData();
    }

    setApplicationTableData() {
        if (localStorage.getItem("applicantTableData")) {
            let result = "";
            for (let application of this.applicationDetailsArray) {
                let tableData = `
                <tr id="apply-row-${application.id}">
                    <th scope="row">${application.id}</th>
                    <td id="apply-title-${application.id}">${application.title}</td>
                    <td id="apply-name-${application.id}">${application.candidateName}</td>
                    <td id="apply-email-${application.id}">${application.candidateEmail}</td>
                    <td id="apply-experience-${application.id}">${application.candidateExperience}</td>
                    <td id="apply-opening-${application.id}">${application.numberOfOpenings}</td>
                    <td id="apply-button-${application.candidateName}"><button class="btn btn-outline-primary" onclick="jobPortal.setInterview('${application.candidateName}')">Schedule Interview</button></td>
                </tr>`;
                result += tableData;
            }
            (<HTMLTableElement>document.getElementById("applicanttbody")).innerHTML = result;
        } else {
            let tbody = <HTMLTableElement>document.getElementById("applicanttbody");
            tbody.classList.add("text-center");
            let tr = document.createElement("tr");
            tr.innerHTML = `<td colspan="7">No Data Available!!</td>`;
            tbody.appendChild(tr);
        }
    }

    setInterview(candidateName: string) {
        let target = document.getElementById(`apply-button-${candidateName}`);
        let buttons = `
        <button class="btn btn-outline-danger" id="reject-${candidateName}" onclick="jobPortal.displayResult('${candidateName}','reject')">Reject</button>
        <button class="btn btn-outline-success" id="accept-${candidateName}" onclick="jobPortal.displayResult('${candidateName}','accept')">Accept</button>`;
        (<HTMLTableElement>target).innerHTML = buttons;
    }

    displayResult(name: string, control: string) {
        let resultButton;
        if (control === "accept") {
            resultButton = `<button class="btn btn-outline-success" disabled>Accepted</button>`;
            alert(`${name} is hired.`);
        } else {
            resultButton = `<button class="btn btn-outline-danger" disabled>Rejected</button>`;
            alert(`${name} is not hired.`);
        }
        let target = document.getElementById(`apply-button-${name}`);
        (<HTMLTableElement>target).innerHTML = resultButton;
    }
}

let vacancyDetails: VacancyDetails[] = JSON.parse(localStorage.getItem("vacancyTableData") || "[]");
let applicantDetails: ApplicantDetails[] = JSON.parse(localStorage.getItem("applicantTableData") || "[]");

let jobPortal = new JobPortal(vacancyDetails, applicantDetails);

(<HTMLButtonElement>document.getElementById("createvancancybutton"))?.addEventListener("click", (event) => {
    event.preventDefault();
    let jobId = (<HTMLInputElement>document.getElementById("jobid")).value;
    let jobTitle = (<HTMLInputElement>document.getElementById("jobtitle")).value;
    let jobDescription = (<HTMLInputElement>document.getElementById("jobdescription")).value;
    let jobOpening = (<HTMLInputElement>document.getElementById("numberofopenings")).value;
    let vacancyObj = { id: jobId, title: jobTitle, description: jobDescription, numberOfOpenings: jobOpening };
    jobPortal.createVacancy(vacancyObj);
});

(<HTMLButtonElement>document.getElementById("submitapplication"))?.addEventListener("click", (event) => {
    event.preventDefault();
    let jobId = (<HTMLInputElement>document.getElementById("applyjobid")).value;
    let jobTitle = (<HTMLInputElement>document.getElementById("applyjobtitle")).value;
    let personName = (<HTMLInputElement>document.getElementById("applypersonname")).value;
    let personEmail = (<HTMLInputElement>document.getElementById("applypersonemail")).value;
    let personExperience = (<HTMLInputElement>document.getElementById("applypersonexperience")).value;
    let jobOpening = (<HTMLInputElement>document.getElementById("applynumberofopenings")).value;
    let applicationObj = { id: jobId, title: jobTitle, candidateName: personName, candidateEmail: personEmail, candidateExperience: personExperience, numberOfOpenings: jobOpening };
    jobPortal.createApplication(applicationObj);
});

-------------------------------------------------------------------------------------------------------------------------------------------

check spelling
increase colspan