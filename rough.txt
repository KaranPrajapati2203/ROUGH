// repository.ts
export interface Item {
    id: number;
    name: string;
}

export class Repository<T> {
    private items: T[] = [];

    add(item: T): void {
        this.items.push(item);
    }

    getAll(): T[] {
        return this.items;
    }

    findById(id: number): T | null {
        let index = this.items.findIndex((element) => {
            if (typeof element === "string") {
                return false;
            } else {
                return (element as any).id === id;
            }
        });

        if (index !== -1) {
            return this.items[index];
        } else {
            return null;
        }
    }

}

------------
// app.ts
import { Item, Repository } from "./repository";

const stringRepository = new Repository<string>();
stringRepository.add("Hello");
stringRepository.add("World");

console.log("All strings:", stringRepository.getAll());

console.log("Find string by ID:", stringRepository.findById(1));

const objectRepository = new Repository<Item>();
objectRepository.add({ id: 1, name: "Alice" });
objectRepository.add({ id: 2, name: "Bob" });

console.log("All items:", objectRepository.getAll());

console.log("Find item by ID (1):", objectRepository.findById(1));

console.log("Find item by ID (3):", objectRepository.findById(3));  

-------------------------------------------------------------------------------------------------------------------

export class Stack<T> {
    private stack: T[] = [];
    showstack(): T[] {
        return this.stack;
    }
    push(item: T): void {
        this.stack[this.stack.length] = item;
    }
    pop(): T | null {
        if (this.stack.length === 0) {
            return null;
        }
        let lastElement: T = this.stack[this.stack.length - 1];
        this.stack.splice(this.stack.length - 1, 1);
        return lastElement;
    }
    peek(): T | null {
        if (this.stack.length === 0) {
            return null;
        }
        let lastElement = this.stack[this.stack.length - 1]
        return lastElement;
    }
    isEmpty(): boolean {
        return this.stack.length === 0;
    }
}

-----------------------

import { Stack } from "./repository";

let stringStack = new Stack<string>();
stringStack.push("Hello");
stringStack.push("World");
stringStack.push("Typescript");
console.log(stringStack.showstack());
console.log(stringStack.pop());
console.log(stringStack.showstack());
console.log(stringStack.peek());
console.log(stringStack.isEmpty());

-----------------------------------------------------------------------------------------------------------------------------------

export function sortArray<T>(input: T[], comparisonFunction: (a: T, b: T) => number) {
    let copyOfArray: T[] = [...input];
    console.log(copyOfArray.sort(comparisonFunction));
    console.log(input);
    return copyOfArray.sort(comparisonFunction)
}

------------------------------

import { sortArray } from "./repository";

const numbers = [3, 1, 4, 1, 5, 9];
const sortedNumbers = sortArray(numbers, (a, b) => a - b);
console.log("Sorted Numbers (Ascending):", sortedNumbers);

const strings = ["apple", "orange", "banana", "grape"];
const sortedStrings = sortArray(strings, (a, b) => b.localeCompare(a));
console.log("Sorted Strings (Descending):", sortedStrings);  

interface Item {
    id: number;
    name: string;
}

const items: Item[] = [
    { id: 3, name: "Item 3" },
    { id: 1, name: "Item 1" },
    { id: 2, name: "Item 2" }
];

const sortedItems = sortArray(items, (a, b) => a.id - b.id);
console.log("Sorted Items by ID (Ascending):", sortedItems); 

--------------------------------------------------------------------------------------------------------------------------------

export function mergeArrays<T>(arr1: T[], arr2: T[]) {
    return arr1.concat(arr2);
}
export function findIndex<T>(arr: T[], predicate: (item: T) => boolean): number {
    for (let i = 0; i < arr.length; i++) {
        if (predicate(arr[i])) {
            return i;  // Return index of first matching item
        }
    }
    return -1;  // Return -1 if no matching item is found
}
export function removeDuplicates<T>(arr: T[]): T[] {
    let set: T[] = Array.from(new Set(arr));
    return set;
}

------------------

import { findIndex, mergeArrays, removeDuplicates } from "./repository";
let input1 = [1, 2, 3, 4, 5];
let input2 = [50, 60, 70, 80, 90, 100];
console.log(mergeArrays(input1, input2));

let input3 = [1, 2, 3, 2];
console.log(removeDuplicates(input3))

interface Item {
    id: number;
    name: string;
}

const items: Item[] = [
    { id: 1, name: "Item 1" },
    { id: 2, name: "Item 2" },
    { id: 3, name: "Item 3" }
];

const index = findIndex(items, item => item.id === 2);
console.log("Index of Item with ID 2:", index);  // Output: 1
